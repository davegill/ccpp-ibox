# User's Guide

The SHARED PHYSICS code calls CCPP-compliant
physics schemes through the CCPP infrastructure code. As such, it requires the
CCPP infrastructure code and physics code, both of which are included as git
submodules within the SCM code. 

## Obtaining Code
1. Download a compressed file or clone the source using
  * `git clone -b wrf_devel https://davegill@github.com/davegill/ccpp-phystest.git`
  and enter your github password if prompted.
2. Change directory into the project.
  * `cd ccpp-phystest`
3. Install the external libraries
  * `manage_externals/checkout_externals`
  and, if asked, enter your github credentials again. (It may ask for this a number of times)

## Building and Compiling the SCM with CCPP
1. Run the CCPP prebuild script to generate physics caps and makefile segments.
  * `./ccpp-framework/scripts/ccpp_prebuild.py --model=phystest`
  Note: add `--debug` to see the full output of the script.
2. Change directory to the top-level SCM directory.
  * `cd phystest`
3. Run the machine setup script if necessary (the CENTOS script is needed for modeling2). This script loads
compiler modules (Fortran 2003-compliant), netCDF module, etc. and sets
compiler environment variables.
  * `source etc/Theia_setup_intel.csh` (for csh) or `. etc/Theia_setup_intel.sh` (for bash)
  * `source etc/Theia_setup_pgi.csh` (for csh) or `. etc/Theia_setup_pgi.sh` (for bash)
  * `source etc/Cheyenne_setup_intel.csh` (for csh) or `. etc/Cheyenne_setup_intel.sh` (for bash)
  * `source etc/Cheyenne_setup_pgi.csh` (for csh) or `. etc/Cheyenne_setup_pgi.sh` (for bash)
  * `source etc/UBUNTU_setup.csh` (for csh) or `. etc/UBUNTU_setup.sh` (for bash) if following the instructions in doc/README_UBUNTU.txt
  * `source etc/CENTOS_setup.csh` (for csh) or `. etc/CENTOS_setup.sh` (for bash) if following the instructions in doc/README_CENTOS.txt
  * `source etc/MACOSX_setup.csh` (for csh) or `. etc/MACOSX_setup.sh` (for bash) if following the instructions in doc/README_MACOSX.txt
4. Make a build directory and change into it.
  * `mkdir bin && cd bin`
5. Invoke cmake on the source code to build.
  * `cmake ../src` (without threading/OpenMP)
  * `cmake -DOPENMP=1 ../src` (with threading/OpenMP)

  For extensive debugging output, add `-DCMAKE_BUILD_TYPE=Debug` to the `cmake` command.
6. Compile. Add `VERBOSE=1` to obtain more information on the build process.
  * `make`

## Running the SCM with CCPP
1. Run the job
  * `./phystest`

